@using System.Collections.Immutable
@inject FragmentMap FragmentMap
@{
    if (Components is null) return;
    RenderFragment fragment = renderTreeBuilder =>
    {
        for (var i = 0; i < Components.Length; i++)
        {
            renderTreeBuilder.OpenComponent(i, Components[i]);
            foreach (var (key, value) in Attributes)
            {
                renderTreeBuilder.AddAttribute(i, key, value);
            }
            renderTreeBuilder.CloseComponent();
        }
    };
    @fragment
}

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public Dictionary<string, object> Attributes { get; set; } = new();

    private Type[] Components { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Components = FragmentMap.ContainsKey(Name) ? FragmentMap[Name].ToArray() : null;
    }

}
